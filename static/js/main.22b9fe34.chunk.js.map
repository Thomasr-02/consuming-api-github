{"version":3,"sources":["components/Navbar.js","components/profile/profile.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Component","profile","props","getUser","e","a","user","target","value","console","log","axios","get","then","res","data","usuario","setState","catch","err","state","id","onChange","this","type","required","map","key","src","avatar_url","public_repos","followers","following","html_url","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mRAEqBA,E,iLAEb,OACI,yBAAKC,UAAU,mCACX,yBAAKA,UAAU,aACX,uBAAGA,UAAW,eAAeC,KAAK,iCAAlC,gB,GALgBC,a,yCC6ErBC,E,YA3EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAKVC,QANmB,uCAMT,WAAOC,GAAP,eAAAC,EAAA,6DACAC,EAAOF,EAAEG,OAAOC,MACtBC,QAAQC,IAAIJ,GAFN,SAGAK,IAAMC,IAAN,uCAA0CN,IAC3CO,MAAK,SAAAC,GACFL,QAAQC,IAAII,EAAIC,MAChB,IAAMC,EAAUF,EAAIC,KACpB,EAAKE,SAAS,CAAEX,KAAM,CAACU,QAGxBE,OAAM,SAACC,GACNV,QAAQC,IAAIS,MAXd,2CANS,sDAEf,EAAKC,MAAQ,CACTd,KAAM,IAHK,E,sEAsBf,OACI,oCACI,yBAAKR,UAAU,YAAYuB,GAAG,OAC1B,yBAAKvB,UAAU,kBACX,yDACA,uBAAGA,UAAU,QAAb,yBACA,2BAAOwB,SAAUC,KAAKpB,QAASkB,GAAG,SAASG,KAAK,OAAO1B,UAAU,eAAe2B,UAAQ,MAM5FF,KAAKH,MAAMd,KAAKoB,KAAI,SAAApB,GAAI,OAEpB,yBAAKqB,IAAKrB,EAAKe,GAAIvB,UAAU,mBAAmBuB,GAAG,YAE/C,yBAAKvB,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAe8B,IAAKtB,EAAKuB,aACxC,wBAAI/B,UAAU,+BACV,wBAAIA,UAAU,mBAAd,gBAEI,0BAAMA,UAAU,uBAAuBQ,EAAKwB,eAEhD,wBAAIhC,UAAU,mBAAd,cAEI,0BAAMA,UAAU,uBAAuBQ,EAAKyB,YAEhD,wBAAIjC,UAAU,mBAAd,YAEI,0BAAMA,UAAU,oBAAoBQ,EAAK0B,aAGjD,yBAAKlC,UAAU,aACX,uBAAGC,KAAMO,EAAK2B,SAAUnC,UAAU,6BAAlC,2B,GA1DtBoC,IAAMlC,WCebmC,E,iLATX,OACE,yBAAKrC,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAPWoC,IAAMlC,WCOJoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.22b9fe34.chunk.js","sourcesContent":["import React ,{Component}from 'react';\n\nexport default class Navbar extends Component {\n    render () {\n        return (\n            <nav className=\"navbar navbar-dark bg-info mb-3\">\n                <div className=\"container\" >\n                    <a className= \"navbar-brand\" href=\"https://github.com/thomasr-02\">\n                        Github\n                    </a>\n                </div>\n            </nav>\n\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass profile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: []\n        }\n    }\n    getUser = async (e) => {\n        const user = e.target.value;\n        console.log(user);\n        await axios.get(`https://api.github.com/users/${user}`)\n            .then(res => {\n                console.log(res.data)\n                const usuario = res.data;\n                this.setState({ user: [usuario] });\n\n                \n            }).catch((err) => {\n                console.log(err)\n            });\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"container\" id=\"app\">\n                    <div className=\"card card-body\">\n                        <h1>Pesquisar users do github</h1>\n                        <p className=\"lead\">Digite o nome do user</p>\n                        <input onChange={this.getUser} id=\"search\" type=\"text\" className=\"form-control\" required />\n                    </div>\n                    \n                </div>\n                {\n\n                    this.state.user.map(user => (\n\n                        <div key={user.id} className=\"container border\" id=\"ListUser\">\n\n                            <div className=\"row\">\n                                <div className=\"col-md-4\">\n                                    <div className=\"card\" >\n                                        <img className=\"card-img-top\" src={user.avatar_url} />\n                                        <ul className=\"list-group list-group-flush\">\n                                            <li className=\"list-group-item\">\n                                                Repositorios:\n                                                <span className=\"Badge badge-success\">{user.public_repos}</span>\n                                            </li>\n                                            <li className=\"list-group-item\">\n                                                Seguidores:\n                                                <span className=\"Badge badge-primary\">{user.followers}</span>\n                                            </li>\n                                            <li className=\"list-group-item\">\n                                                Seguindo:\n                                                <span className=\"Badge badge-info\">{user.following}</span>\n                                            </li>\n                                        </ul>\n                                        <div className=\"card-body\">\n                                            <a href={user.html_url} className=\"btn btn-success btn-block\">Ver perfil</a>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n\n\n\n                        </div>\n                    ))\n                }\n\n            </>\n        )\n\n    }\n}\nexport default profile;","import React from 'react';\nimport Navbar from './components/Navbar'\nimport Profile  from './components/profile/profile';\n//some classes extends React.Component\n\nclass App extends React.Component {\n  \n  render() {\n   \n    return (\n      <div className=\"App\">\n       <Navbar />\n       <Profile/>\n       </div>\n       );\n     }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}